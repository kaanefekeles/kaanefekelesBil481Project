/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HWPART2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.Random;

class AppTest {
    @Test
   public void testCorrectExecutionSEQUENCE_AT_FRONT() {
      ArrayList<Integer> array = new ArrayList<>();
      array.add(1);
      array.add(2);
      array.add(3);
      Random r = new Random();
      for(int i = 0; i<10;i++){
        array.add(r.nextInt());  
      }
      assertTrue(App.subsequentSubsetController(array, 1,2,3));
    }

    @Test
   public void testCorrectExecutionSEQUENCE_AT_BOTTTOM() {
      ArrayList<Integer> array = new ArrayList<>();
      Random r = new Random();
      for(int i = 0; i<10;i++){
        array.add(r.nextInt());  
      }
      array.add(1);
      array.add(2);
      array.add(3);
      assertTrue(App.subsequentSubsetController(array, 1,2,3));
    }

    @Test
   public void testCorrectExecutionSEQUENCE_AT_MIDDLE() {
      ArrayList<Integer> array = new ArrayList<>();
      Random r = new Random();
      for(int i = 0; i<10;i++){
        array.add(r.nextInt());  
      }
      array.add(1);
      array.add(2);
      array.add(3);
      for(int i = 0; i<10;i++){
        array.add(r.nextInt());  
      }
      assertTrue(App.subsequentSubsetController(array, 1,2,3));
    }
    @Test
    public void testFailExecutionSEQUENCE_EXISTS_WITH_DIFFRENT_ORDER() {
       ArrayList<Integer> array = new ArrayList<>();
       Random r = new Random();
       array.add(2);
       array.add(1);
       for(int i = 0; i<10;i++){
         array.add(r.nextInt());  
       }
       array.add(3);
       for(int i = 0; i<10;i++){
         array.add(r.nextInt());  
       }
       assertFalse(App.subsequentSubsetController(array, 1,2,3));
     }

     @Test
    public void testFailExecutionSEQUENCE_DOES_NOT_EXIST() {
       ArrayList<Integer> array = new ArrayList<>();
       Random r = new Random();
       for(int i = 0; i<10;i++){
         array.add(r.nextInt());  
       }
       assertFalse(App.subsequentSubsetController(array, 1,2,3));
     }

    @Test
    public void testCorrectExecutionSEQUENCE_IS_EQUAL_TO_SEARCH() {
        ArrayList<Integer> array = new ArrayList<>();
        array.add(1);
        array.add(2);
        array.add(3);
        assertTrue(App.subsequentSubsetController(array, 1,2,3));
    }

    
    @Test
    public void testEmptyArray() {
        Random r = new Random();
        ArrayList<Integer> array = new ArrayList<>();
        assertFalse(App.subsequentSubsetController(array, r.nextInt(),r.nextInt(),r.nextInt()));
    }

    @Test
    public void testNull() {
        Random r = new Random();
        assertFalse(App.subsequentSubsetController(null, r.nextInt(),r.nextInt(),r.nextInt()));
    }

}
